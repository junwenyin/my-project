name: Run New Service Validation
on:
  workflow_call:
    outputs:
      is_validated:
        description: 'Validation status'
        value: ${{ jobs.Run-OPA-Tests.outputs.is_validated }}

jobs:
  Run-OPA-Tests:
    runs-on: ubuntu-latest
    outputs:
      is_validated: ${{ steps.step_validated.outputs.is_validated }}
    steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    # Print the GitHub event context
    - name: Print GitHub Event Context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: |
        echo "GitHub Event Context:"
        echo "$GITHUB_CONTEXT"
      shell: bash

    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v2
      with:
        version: latest

    - name: OPA Version
      run: opa version

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: ./terraform
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Run OPA Tests
      run: |
        opa eval --data  tests/terraform.rego --input  terraform/tfplan.json "data.terraform.policy.resource_change_limits.resource_change_summary" -f raw > opa_result.json
        cat opa_result.json
        opa_result=$(jq -c '.' opa_result.json)
        echo $opa_result
        escaped_result=$(echo "$opa_result" | sed 's/"/\\"/g')
        echo "opa_result=$escaped_result" >> $GITHUB_ENV

    - name: Run OPA Validation
      id: step_validated
      run: |
        opa eval --data  tests/terraform.rego --input  terraform/tfplan.json "data.terraform.policy.resource_change_limits.authz" -f raw > opa_authz.json
        cat opa_authz.json
        opa_authz=$(jq -c '.' opa_authz.json)
        echo $opa_authz
        echo "is_validated=$opa_authz" >> $GITHUB_ENV
        echo "::set-output name=is_validated::$opa_authz" # Set step output
